From 1317cd0823f486c66a6f3e9deacecc9fbf64f3a4 Mon Sep 17 00:00:00 2001
From: Stefan Eichenberger <stefan.eichenberger@netmodule.com>
Date: Tue, 18 Feb 2014 13:24:45 +0100
Subject: [PATCH 1/3] xdevcfg: Make sure that devcfg is not in loopback mode

Some FSBLs can enable the loopback mode (e.g. QSPI boot). This will prevent linux from writing the fpga image.

Signed-off-by: Stefan Eichenberger <stefan.eichenberger@netmodule.com>
---
 drivers/char/xilinx_devcfg.c |   10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/drivers/char/xilinx_devcfg.c b/drivers/char/xilinx_devcfg.c
index 4f50fff..7164a56 100644
--- a/drivers/char/xilinx_devcfg.c
+++ b/drivers/char/xilinx_devcfg.c
@@ -56,6 +56,7 @@ static DEFINE_MUTEX(xdevcfg_mutex);
 #define XDCFG_DMA_SRC_LEN_OFFSET	0x20 /* DMA Source Transfer Length */
 #define XDCFG_DMA_DEST_LEN_OFFSET	0x24 /* DMA Destination Transfer */
 #define XDCFG_UNLOCK_OFFSET		0x34 /* Unlock Register */
+#define XDCFG_MCTRL_OFFSET		0x80 /* Miscellaneous Control Reg */
 
 /* Control Register Bit definitions */
 #define XDCFG_CTRL_PCFG_PROG_B_MASK	0x40000000 /* Program signal to
@@ -92,6 +93,10 @@ static DEFINE_MUTEX(xdevcfg_mutex);
 #define XDCFG_IXR_PCFG_DONE_MASK	0x00000004 /* FPGA programmed */
 #define XDCFG_IXR_ERROR_FLAGS_MASK	0x00F0F860
 #define XDCFG_IXR_ALL_MASK		0xF8F7F87F
+
+/* Miscellaneous control Register bit definitions */
+#define XDCFG_MCTRL_INT_PCAP_LPBK	0x00000010	/* Internal pcap loopback */
+
 /* Miscellaneous constant values */
 #define XDCFG_DMA_INVALID_ADDRESS	0xFFFFFFFF  /* Invalid DMA address */
 
@@ -1520,6 +1525,7 @@ static int xdevcfg_drv_probe(struct platform_device *pdev)
 	dev_t devt;
 	int retval;
 	u32 ctrlreg;
+	u32 mctrl;
 	struct device_node *np;
 	const void *prop;
 	int size;
@@ -1639,6 +1645,10 @@ static int xdevcfg_drv_probe(struct platform_device *pdev)
 				XDCFG_CTRL_USER_MODE_MASK |
 				ctrlreg));
 
+	/* Make sure the loopback bit is not set in the miscellaneous control register*/
+	mctrl = xdevcfg_readreg(drvdata->base_address + XDCFG_MCTRL_OFFSET);
+	mctrl &= ~XDCFG_MCTRL_INT_PCAP_LPBK;
+	xdevcfg_writereg(drvdata->base_address + XDCFG_MCTRL_OFFSET, mctrl);
 
 	cdev_init(&drvdata->cdev, &xdevcfg_fops);
 	drvdata->cdev.owner = THIS_MODULE;
-- 
1.7.10.4

